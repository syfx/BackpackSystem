-- 储存当前所有装备类型的数据（不是背包中的数据）
itemDatas = {}

-- 信息提示框上的Tooltip脚本（Tooltip类型）
local tooltip = nil
-- 拖拽时临时储存装备的格子上的DragUI脚本（DragUI类型）
local dragItem = nil
-- 背包面板上的PackPanel脚本（PackPanel类型）
local packPanel = nil
-- 添加装备按钮列表（GameObject类型）
local buttonList = {}
--当前使用的画布
local canvas

--储存装备实体的类
local ItemModel

--是否正在显示Tooltip
local IsShowTooltip = false
--是否正在拖拽装备
local IsDrag = false

function start()
	print("lua start...")
	-- 加载装备数据
	LoadItemData()
	-- 生成按钮
	for k, v in ipairs(itemDatas)
	do
		local rectTransform = objButtonList:GetComponent(typeof(CS.UnityEngine.RectTransform))
		rectTransform.sizeDelta = rectTransform.sizeDelta + CS.UnityEngine.Vector2(0, 30)
		buttonList[k] = CS.UnityEngine.GameObject.Instantiate(buttonPrefab, objButtonList.transform)
		buttonList[k].transform:GetChild(0):GetComponent(typeof(CS.UnityEngine.UI.Text)).text = v.Name
		-- 为 按钮 注册事件
		buttonList[k]:GetComponent(typeof(CS.UnityEngine.UI.Button)).onClick:AddListener(function()
			StoreItem(k)
		end)
	end
	ItemModel = CS.PackSystem.ItemModel

	tooltip = objTooltip:GetComponent(typeof(CS.PackSystem.Tooltip))
	dragItem = objDragUI:GetComponent(typeof(CS.PackSystem.DragUI))
	packPanel = objPackPanel:GetComponent(typeof(CS.PackSystem.PackPanel))
	canvas = CS.UnityEngine.GameObject.Find("Canvas")
	--注册鼠标进入格子事件
	local GridUI = CS.PackSystem.GridUI
	GridUI.OnEnter = GridUI_OnEnter
	GridUI.OnExit = GridUI_OnExit
	GridUI.OnLeftBeginDrag = GridUI_OnLeftBeginDrag
	GridUI.OnLeftEndDrag =  GridUI_OnLeftEndDrag
end

function update()
	local position = CS.PackSystem.MiddleTier.ScreenPointToLocalPoint(canvas.transform, CS.UnityEngine.Input.mousePosition, nil)
	if (IsDrag)
	then
		--显示拖拽UI
		dragItem:ShowDrag()
		dragItem:SetPosition(position)
	elseif (IsShowTooltip)
	then
		--显示提示框
		tooltip:ShowToolTip()
		tooltip:SetPosition(position)
	end
end

-- 添加装备
-- id(int)：装备在itemDatas中的id
function StoreItem(id)
	-- 背包满了
    if (not packPanel:IsFull())
	then
		if (itemDatas[id] ~= nil)
		then
			-- 在背包中添加装备
			CreateItem(itemDatas[id], packPanel:GetNullGrid())
		end
	end
end

--鼠标进入格子回调函数
function GridUI_OnEnter(transform)
	local item = ItemModel.GetData(transform.name)
    if (item	~= nil)
	then
		tooltip:UpdateToolTip(GetToolTipText(item))
		IsShowTooltip = true
	end
end

--鼠标离开格子回调函数
function GridUI_OnExit()
	IsShowTooltip = false
	tooltip:HideToolTip()
end

--鼠标开始拖拽装备回调函数
function GridUI_OnLeftBeginDrag(transform)
    if (transform.childCount ~= 0)
	then
		local item = ItemModel.GetData(transform.name)
		-- 通过反射获取泛型方法
		local loadGeneric = xlua.get_generic_method(CS.UnityEngine.Resources, "Load")
		local load = loadGeneric(CS.UnityEngine.Sprite)
		--调用获取的泛型方法
		local sprite = load(item.Icon)

		dragItem:Set_Item(sprite)
		CS.UnityEngine.Object.Destroy(transform:GetChild(0).gameObject)
		IsDrag = true
	end
end

-- 鼠标结束拖拽装备回调函数
-- arg1：装备原格子的transform
-- arg2：停止拖拽时时格子的transform
function GridUI_OnLeftEndDrag(arg1, arg2)
	-- 没有拖拽装备
	--if(IsDrag == false)
	--then
		--return
	--end
    --扔装备
    if (arg2 == nil)
	then
        ItemModel.RemoveDate(arg1.name)
    else
        item = ItemModel.GetData(arg1.name)						-- 得到装备数据
        ItemModel.RemoveDate(arg1.name)							-- 删除装备数据
        if (arg2.tag == "Grid")				-- 拖到装备格上
        then
            if (arg2.childCount == 0)				-- 拖到的格子上没装备
			then
                CreateItem(item, arg2)
            else													-- 拖到的格子上有装备
                _item = ItemModel.GetData(arg2.name)			-- 得到原有装备数据
                ItemModel.RemoveDate(arg2.name)					-- 删除原有装备数据
				-- 删除原有孩子（原有装备图标实例）
                CS.UnityEngine.Object.Destroy(arg2:GetChild(0).gameObject)
                --交换
                CreateItem(item, arg2)
                CreateItem(_item, arg1)
            end
        else											-- 未拖到装备格上，再放回去
            CreateItem(item, arg1)
		end
    end
    IsDrag = false
    dragItem:HideDrag()
end

-- 创建装备图标
-- item（Item）：装备类
-- ParentTF（Transform）：父变换
function CreateItem(item, ParentTF)
	local loadGeneric = xlua.get_generic_method(CS.UnityEngine.Resources, "Load")
	local load = loadGeneric(CS.UnityEngine.GameObject)
    ItemPrefab = load("Prefabs/ItemUI")
	-- 实例化游戏物体
    newItem = CS.UnityEngine.GameObject.Instantiate(ItemPrefab)
	load =  loadGeneric(CS.UnityEngine.Sprite)
    sprite = load(item.Icon)
	--设置图标
    newItem:GetComponent(typeof(CS.PackSystem.ItemUI)):Set_Item(sprite)
    newItem.transform:SetParent(ParentTF);
    newItem.transform.localPosition = CS.UnityEngine.Vector3.zero;
    newItem.transform.localScale = CS.UnityEngine.Vector3.one;
	-- 在背包数据类中添加这个装备的信息
    ItemModel.StoreData(ParentTF.name, item);
end

-- 获取装备的提示信息 (item: Item类型变量)
function GetToolTipText(item)
    if (item == nil)
	then
        return nil
	end
	--new一个StringBuilder对象
	local StringBuilder = CS.System.Text.StringBuilder
	local strDescribe = StringBuilder()

    strDescribe:AppendFormat("<color=red>{0}</color>\n\n", item.Name)

	if(item.Item_Type == CS.PackSystem.ItemType.Weapon)
	then
        if (item.Attack ~= 0)
		then
            strDescribe:AppendFormat("<color=white>攻击力：{0}</color>\n", item.Attack);
		end
        if (item.AttackSpeed ~= 0)
		then
            strDescribe:AppendFormat("<color=white>攻击速度：{0}</color>\n", item.AttackSpeed)
		end
	elseif( item.Item_Type == CS.PackSystem.ItemType.Armor )
	then
		 if (item.HP ~= 0)
		then
           strDescribe:AppendFormat("<color=white>生命值：{0}</color>\n", item.HP)
		end
        if (item.Power ~= 0)
		then
            strDescribe:AppendFormat("<color=white>防御力：{0}</color>\n", item.Power)
		end
    elseif( item.Item_Type == CS.PackSystem.ItemType.Consumable )
	then
		if (item.HP ~= 0)
		then
           strDescribe:AppendFormat("<color=blue>恢复HP：{0}</color>\n", item.Hp)
		end
        if (item.Mp ~= 0)
		then
            strDescribe:AppendFormat("<color=blue>恢复MP：{0}</color>\n", item.Mp)
		end
	else
		return nil
	end

    strDescribe:AppendFormat("\n");
    strDescribe:AppendFormat("<color=white>{0}</color>\n\n", item.Introduction)
    strDescribe:AppendFormat("<color=yellow>购买价格：{0}</color>\n", item.Buyprice)
    strDescribe:AppendFormat("<color=yellow>出售价格：{0}</color>", item.SellPrice)
	
    return strDescribe:ToString()
end

-- 加载装备数据
function LoadItemData()
	local path = nil
	local item = nil
	local ItemType = CS.PackSystem.ItemType

	local Weapon =  CS.PackSystem.Weapon
    path = "ItemImage/INV_2H_Auchindoun_01"
	itemDatas[1] = Weapon(ItemType.Weapon, 1, "萨德的弯刀", 300, 180, "萨德使用过的弯刀", path, 20, 0)
	path = "ItemImage/Ability_Warrior_WeaponMastery"
	itemDatas[2] = Weapon(ItemType.Weapon, 2, "幻影之刃", 600, 400, "世上武功，唯快不破", path, 30, 0.2)
    path = "ItemImage/Ability_Warrior_Charge"
    itemDatas[3]  = Weapon(ItemType.Weapon, 3, "泣血刀", 800, 500, "唯有鲜血才能使它平静下来", path, 60, 0)
    path = "ItemImage/INV_Axe_01"
    itemDatas[4] = Weapon(ItemType.Weapon, 4, "间斧", 200, 120, "就是很平常的斧头", path, 13, 0)
    path = "ItemImage/INV_Axe_02"
    itemDatas[5] = Weapon(ItemType.Weapon, 5, "万斧", 900, 600, "这个斧头就牛逼了", path, 70, 0)

	local Armor = CS.PackSystem.Armor
    path = "ItemImage/Ability_Warrior_ShieldMastery"
    itemDatas[6] = Armor(ItemType.Armor, 6, "圣盾", 400, 400, "神圣而不容侵犯的盾牌", path, 0, 30)
    path = "ItemImage/INV_Chest_Chain_06"
    itemDatas[7] = Armor(ItemType.Armor, 7, "骑士铠甲", 900, 500, "曾经一个跟随一个骑士的铠甲", path, 300, 20)
    path = "ItemImage/INV_Helmet_08"
    itemDatas[8] = Armor(ItemType.Armor, 8, "振奋头盔", 600, 400, "带上它就有一种莫名的兴奋感", path, 300, 0)

	local Consumable = CS.PackSystem.Consumable
    path = "ItemImage/INV_Potion_06"
    itemDatas[9] = Consumable(ItemType.Consumable, 9, "大血瓶", 100, 60, "一种由恢复生命的药草浸泡而成的液体", path, 200, 0)
    path = "ItemImage/INV_Potion_03"
    itemDatas[10] = Consumable(ItemType.Consumable, 10, "大蓝瓶", 100, 60, "一种由恢复蓝量的药草浸泡而成的液体", path, 0, 150)
end


